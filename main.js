/* Задание на урок:

1) Автоматизировать вопросы пользователю про фильмы при помощи цикла

2) Сделать так, чтобы пользователь не мог оставить ответ в виде пустой строки,
отменить ответ или ввести название фильма длинее, чем 50 символов. Если это происходит - 
возвращаем пользователя к вопросам опять. (Примечание: к любой строке можно обратиться как 'str.length' - и получить ее длину)

3) При помощи условий проверить  personalMovieDB.count, и если он меньше 10 - вывести сообщение
"Просмотрено довольно мало фильмов", если от 10 до 30 - "Вы классический зритель", а если больше - 
"Вы киноман". А если не подошло ни к одному варианту - "Произошла ошибка"

4) Потренироваться и переписать цикл еще двумя способами while, do while
*/

// Activate strict JS mode
"use strict";

// Код возьмите из предыдущего домашнего задания - практика 1

// create variable to store answer data value from user
const numberOfFilms = Number(prompt(`Сколько фильмов вы уже посмотрели?`));
// т.о. мы задаем вопрос пользователю и сохраняем ответ в переменной 'const numberOfFilms'

// Создаем базу данных т.е. Создать объект personalMovieDB и в него поместить такие переменные count, movies, actors, genres для помещения value данных create object to store data of key value pairs
const personalMovieDB = {
  // key value pairs

  // ответ пользователя
  count: numberOfFilms,
  // пустой объект
  movies: {},
  // пустой объект
  actors: {},
  // пустой массив
  genres: [],
  // boolean data value
  privat: false,
};
// т.о. мы создали объект с данными, где key is simply variable of data value

// #1 Автоматизировать вопросы пользователю про фильмы при помощи цикла
// ----------------------
for (let i = 0; i < 2; i++) {
  // Задайте пользователю по два раза вопросы и ответы стоит поместить в отдельные переменные
  const a = prompt("Один из последних просмотренных фильмов?"),
    b = prompt("На сколько оцените его?");
  // т.о. мы создали переменные const a, b чтоб сохранить полученные ответы от пользователей

  // #2 Сделать так, чтобы пользователь не мог оставить ответ в виде пустой строки, отменить ответ или ввести название фильма длинее, чем 50 символов.
  // -------------------
  if (a != null && b != null && a != "" && b != "" && a.length < 50) {
    // если все хорошо то помещаем полученное значение от пользователя в переменную

    // т.е. записать ответы в объект movies
    personalMovieDB.movies[a] = b;

    // to test in console
    console.log("done");

    // #2 А иначе Если пользователь сделал что-то не так то возвращаем пользователя к вопросам опять.
  } else {
    // to test in console
    console.log("error");

    // use decrement js operator to return back to questions
    i--;
  }
}

// #3 - При помощи условий проверить  personalMovieDB.count, и если он меньше 10 - вывести сообщение "Просмотрено довольно мало фильмов", если от 10 до 30 - "Вы классический зритель", а если больше - "Вы киноман". А если не подошло ни к одному варианту - "Произошла ошибка"
// ----------------------
// если меньше 10
if (personalMovieDB.count < 10) {
  console.log("Просмотрено довольно мало фильмов");

  // а иначе если от 10 до 30
} else if (personalMovieDB.count >= 10 && personalMovieDB.count < 30) {
  console.log("Вы классический зритель");

  // а иначе если больше или равно 30
} else if (personalMovieDB.count >= 30) {
  console.log("Вы киноман");

  // а иначе если не подошло ни к одному варианту
} else {
  console.log("Произошла ошибка");
}

// NOTE: Use [] instead of '.' to access to the key values

// Проверить, чтобы все работало без ошибок в консоли т.е. показываем введенные данные пользователем т.е. базу данных в консоле
console.log(personalMovieDB);

/*
'for' - is reserved js keyword to create loops

() - is js operator for conditions, parameters, arguments & etc. 

{} - is js operator of configuration block for functionality code to do 

'let i = 0;' - is js statement of FOR loop & is variable 'i' with initial value of zero & is starting point of LOOP

'i < 2;' - is condition when LOOP is to finish & stop 

'i++' - is js statement of incrementing variable 'i' by 1 

'(a != null && b != null && a != '' && b != '' && a.length < 50)' - это условие проверки. т.е. сделать так, чтобы пользователь не мог оставить ответ в виде пустой строки,
отменить ответ или ввести название фильма длинее, чем 50 символов.

'!' - это оператор отрицания 

'a != null' - означает если пользователь не нажал кнопку ОТМЕНА 

"a != ''" - означает не равно пустой строке т.е. ничего не ввел в инпут поле и пустое значение

'a.length<50' - означает что длина должна быть до 50 символов не больше

'(personalMovieDB.count < 10)' - означает если переменная count содержит data values меньше 10 
*/

// 4) Потренироваться и переписать цикл еще двумя способами while, do while
// ----------------------
// NOTE: You can do the same thing but use while & do while loops 

// NOTE: Далее создайте контрольную точку данных файлов и отправьте на удаленный репазиторий 

/*
Instructions to create repository on Git
=========================
// 1. Go to your folder then click on right mouse button to open up terminal & choose:
// ......................
// 'Open in Integrated Terminal'

// 2. Установить и инициализировать репозиторий
// ......................
// git init

// т.о. должно появится: Initialized empty Git repository in что означает мы создали репозиторий

// 3. Учетные данные пользователя т.е. имени и электронной почты
// ......................
// git config --global user.name "Yevhen"

// git config --global user.email "example@gmail.com"

// ИЛИ

// git config --local user.name "Yevhen"

// git config --local user.email "example@gmail.com"

// т.о. в папке 'git' должен появится файл 'config' с указанными настройками и данными имени и email

// 4. Проверить статус
// ......................
// git status

// т.о. мы увидим есть ли что-то в нашем репозитории или нет

// т.о. мы увидим следующее - No commits yet - Untracked files: index.html main.js т.е. покажет что наш репозиторий пустой и красным цветом файлы, которые просто созданы и существуют в рабочей папке проекта но никаких операций с ними не проделаны

// Далее, чтоб перенести наши файлы в репозиторий

// 5. Добавляем все '-A' файлы в репазиторий для работы с ними
// ......................
// git add -A

// 6. Добавляем файлы по отдельности в репазиторий для работы с ними
// ......................
// git add index.html
// git add style.css
// git add main.js

// т.о. мы добавили файлы в репозиторий

// 7. Проверить статус репозитория
// ......................
// git status

// т.о. мы увидим Changes to be committed: т.е. есть ли что-то в нашем  репозитории или нет и если есть то файлы будут обозначены зеленым цветом и означает что Git уже следит за этими файлами

// 8. Далее создаем контрольную точку т.е. папку с файлами для работы с ними
// ......................
// git commit -a -m"message about what changes are done in file or files"

// т.о. мы создали контрольную точку с данными, которые можно будет потом зайти и посмотреть

// 9. Далее делаем какие-то изменения в наших файлах

// index.html
// ----------
	<h2>Hello World!</h2>

// т.о. добавили новый загаловок

// 10. Проверить статус
// ......................
// git status

// т.о. увидим красным цветом 'modified: index.html' т.е. данные о том что какие-то изменения 'modified:' были сделаны в файле 'index.html'

// 11. Далее можем сохранить все изменения и Добавить изменения в новую контрольную точку
// ......................
// git add index.html

// 12. Либо сохраняем и добавляем все файлы в новую точку контроля
// ......................
// git add -A

// 13. Далее можем закомментировать все изменения
// ......................
// git commit -a -m"h2 heading"

// OR ИЛИ

// 14. Сбросить все изменения до предыдущего коммита т.е. точки контроля
// ......................
// git checkout

// 15. Можем посмотреть все сделанные коммиты т.е. точки контроля
// ......................
// git log

// т.о. мы увидим какие коммиты были сделаны и когда и кем.

// 16. Далее выкладываем репозиторий с точкой контроля в интернет для других разработчиков и т.д. на GitHub
// ......................
// Create repository on GitHub

// https://github.com/

// Click on green button 'New' -> Repository name -> Description -> Public -> Click 'Create repository' button to create & register your new repository

// New - create a new repository
// Repository name - create custom name of repository 'exercise-2'
// Public - make it open to every one to see your repository files

// Далее используем следующие команды чтоб внести файлы в репозиторий

// 18. Привязываем и Добавляем удаленный репозиторий в наш терминал коммандную строку
// ......................
// git remote add origin https://github.com/Yevhen-V-R/exercise-2.git

// 19. Далее Добавляем данные в удаленный репозиторий на GitHub сайте
// ......................
// git push -u origin master

// or

// git push -u origin main

// Далее Refresh GitHub page Ctrl+R to see new repository added 

// Далее создаем новый файл либо делаем какие-то изменения
// ======================

// Создаем новый файл
// ----------------------
// style.css

// Далее командная строка
// ----------------------

// 21. проверяем статус новосозданного файла
// ......................
// git stats

// 22. добавляем в репозиторий
// ......................
// git add -A

// 23. далее станавливаем контрольную точку
// ......................
// git commit -a -m "add style.css file"

// 24. далее добавляем в удаленный репозиторий который находится на GitHub сайте
// ......................
// git push

// NOTE: Click on REFRESH 'CTRL+R'
*/
